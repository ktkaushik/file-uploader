#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('incidents:server');
let http = require('http');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '2222');
console.log(`Starting API on port ${port}`)
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
    console.log(`
    
   '##:::'##::::'###::::'##::::'##::'######::'##::::'##:'####:'##:::'##:
    ##::'##::::'## ##::: ##:::: ##:'##... ##: ##:::: ##:. ##:: ##::'##::
    ##:'##::::'##:. ##:: ##:::: ##: ##:::..:: ##:::: ##:: ##:: ##:'##:::
    #####::::'##:::. ##: ##:::: ##:. ######:: #########:: ##:: #####::::
    ##. ##::: #########: ##:::: ##::..... ##: ##.... ##:: ##:: ##. ##:::
    ##:. ##:: ##.... ##: ##:::: ##:'##::: ##: ##:::: ##:: ##:: ##:. ##::
    ##::. ##: ##:::: ##:. #######::. ######:: ##:::: ##:'####: ##::. ##:
   ..::::..::..:::::..:::.......::::......:::..:::::..::....::..::::..::
   
                                      
      Author ðŸ‘‰ Kaushik Thirthappa
      Resume ðŸ‘‰ https://rsm.io/KaushikLovesBuildingThings
      Email  ðŸ‘‰ kaushikisopentowork@gmail.com
      Phone  ðŸ‘‰ 0413962720
      ______________________________________________________

      This is a Node.js (v18.16.0) assignment made for meldCX
      
      Packages used:
      1. Cron jobs using node-cron (middlewares/jobs)
      2. zip-a-folder used to zip files uploaded by user to download

      Configuration:
      Refer to config/<env>.js and you will find all the configuration options. 

      Options available to configure based on environment:
      1. FOLDER to upload files to
      2. Cron job expressions
      3. When to purge uploaded files?
      4. Total number of files users can upload within time range
      5. Total size limitations on upload
      6. Error messages
      

  `)
}